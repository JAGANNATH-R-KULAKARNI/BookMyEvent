"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidRequestError = exports.NotFoundError = exports.UnAuthorizedError = exports.DatabaseConnectionError = exports.BadRequestError = exports.ErrorSuperClass = void 0;
var ErrorSuperClass = /** @class */ (function (_super) {
    __extends(ErrorSuperClass, _super);
    function ErrorSuperClass(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, ErrorSuperClass.prototype);
        return _this;
    }
    return ErrorSuperClass;
}(Error));
exports.ErrorSuperClass = ErrorSuperClass;
var BadRequestError = /** @class */ (function (_super) {
    __extends(BadRequestError, _super);
    // (public message: string) this defines a varible names 'message' and assignes the value of string parameter to it
    function BadRequestError(message) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.HTTPStatusCode = 400;
        Object.setPrototypeOf(_this, BadRequestError.prototype);
        return _this;
        //Here we inherit the ErrorSuperClass object and assign it to BadRequestError object 
    }
    BadRequestError.prototype.errorMessage = function () {
        return [{ message: this.message }];
    };
    return BadRequestError;
}(ErrorSuperClass));
exports.BadRequestError = BadRequestError;
var DatabaseConnectionError = /** @class */ (function (_super) {
    __extends(DatabaseConnectionError, _super);
    function DatabaseConnectionError() {
        var _this = _super.call(this, 'There was an error connecting to database :(') || this;
        _this.HTTPStatusCode = 500;
        Object.setPrototypeOf(_this, DatabaseConnectionError.prototype);
        return _this;
    }
    DatabaseConnectionError.prototype.errorMessage = function () {
        return [{ message: 'There was an error connecting to database' }];
    };
    return DatabaseConnectionError;
}(ErrorSuperClass));
exports.DatabaseConnectionError = DatabaseConnectionError;
var UnAuthorizedError = /** @class */ (function (_super) {
    __extends(UnAuthorizedError, _super);
    function UnAuthorizedError() {
        var _this = _super.call(this, 'You are Unauthorized') || this;
        _this.HTTPStatusCode = 401;
        Object.setPrototypeOf(_this, UnAuthorizedError.prototype);
        return _this;
    }
    UnAuthorizedError.prototype.errorMessage = function () {
        return [{ message: 'You are Unauthorized' }];
    };
    return UnAuthorizedError;
}(ErrorSuperClass));
exports.UnAuthorizedError = UnAuthorizedError;
var NotFoundError = /** @class */ (function (_super) {
    __extends(NotFoundError, _super);
    function NotFoundError() {
        var _this = _super.call(this, 'Requested URL is not found :(') || this;
        _this.HTTPStatusCode = 404;
        Object.setPrototypeOf(_this, NotFoundError.prototype);
        return _this;
    }
    NotFoundError.prototype.errorMessage = function () {
        return [{ message: 'Requested URL is not found :(' }];
    };
    return NotFoundError;
}(ErrorSuperClass));
exports.NotFoundError = NotFoundError;
var InvalidRequestError = /** @class */ (function (_super) {
    __extends(InvalidRequestError, _super);
    function InvalidRequestError(errors) {
        var _this = _super.call(this, 'Invalid request') || this;
        _this.errors = errors;
        _this.HTTPStatusCode = 400;
        Object.setPrototypeOf(_this, InvalidRequestError.prototype);
        return _this;
    }
    InvalidRequestError.prototype.errorMessage = function () {
        return this.errors.map(function (err) {
            return { message: err.msg, field: err.param };
        });
    };
    return InvalidRequestError;
}(ErrorSuperClass));
exports.InvalidRequestError = InvalidRequestError;
