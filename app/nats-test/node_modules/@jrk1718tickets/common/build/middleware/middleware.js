"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.currentUser = exports.errorHandler = exports.requireAuthorization = exports.validateRequest = void 0;
var express_validator_1 = require("express-validator");
var allErrors_1 = require("../errors/allErrors");
var validateRequest = function (req, res, next) {
    var errors = (0, express_validator_1.validationResult)(req);
    //if error happens throw the error
    if (!errors.isEmpty()) {
        throw new allErrors_1.InvalidRequestError(errors.array());
    }
    next();
    //Next is used to pass control to the next middleware function. If not the request will be left hanging or open.
};
exports.validateRequest = validateRequest;
var requireAuthorization = function (req, res, next) {
    if (!req.currentUser) {
        throw new allErrors_1.UnAuthorizedError();
    }
    next();
};
exports.requireAuthorization = requireAuthorization;
var errorHandler = function (err, req, res, next) {
    if (err instanceof allErrors_1.ErrorSuperClass) {
        return res.status(err.HTTPStatusCode).send({ errors: err.errorMessage() });
    }
    console.log(err);
    return res.status(400).send({
        errors: [{ message: 'Something went wrong :(' }]
    });
};
exports.errorHandler = errorHandler;
var jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
//Now 'currentUser' is globally declared so that typescript won;t show error
var currentUser = function (req, res, next) {
    if (!req.session || !req.session.jwt) { //If no cookie or jsonwebtoken is present return as user is not authorized
        return next();
    }
    try {
        var payload = jsonwebtoken_1.default.verify(req.session.jwt, process.env.BME_JWT_KEY);
        //If user is verified ,payload will have user info value and we set that to 'req.currentUser'
        //OR it will throw error 
        req.currentUser = payload;
    }
    catch (err) {
        console.log(err);
    }
    next();
};
exports.currentUser = currentUser;
