"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
//Abstraction is the concept of object-oriented programming that "shows" only essential attributes and "hides" unnecessary information
//This is a generic class(<T extends Event>)
var Listener = /** @class */ (function () {
    function Listener(client) {
        this.ackWait = 5 * 1000; //5 seconds
        this.client = client;
    }
    Listener.prototype.subscriptionOptions = function () {
        return this.client
            .subscriptionOptions()
            .setDeliverAllAvailable() //Get a list of all the elements that has ever been emitted in the past, This is used only very first time when we haven't processed any events
            .setManualAckMode(true) //If an event is received acknoledgment is created(by default if we loses db then no acknolegment is saved so we give this option.)
            .setAckWait(this.ackWait) //Maximum time client will wait to recieve the acknoledgment
            .setDurableName(this.queueGroupName); //All the unprocessed events are processed once the service comes online
    };
    Listener.prototype.listen = function () {
        var _this = this;
        var subscription = this.client.subscribe(this.subject, this.queueGroupName, //This is a queue-group and if two services are created of this type then NATS server sends event to any one of them
        this.subscriptionOptions());
        subscription.on('message', function (msg) {
            console.log("Message received : " + _this.subject + " / " + _this.queueGroupName);
            var parsedData = _this.parseMessage(msg);
            _this.onMessage(parsedData, msg);
        });
    };
    Listener.prototype.parseMessage = function (msg) {
        var data = msg.getData();
        return typeof data === 'string' ? JSON.parse(data) : JSON.parse(data.toString('utf-8'));
    };
    return Listener;
}());
exports.Listener = Listener;
